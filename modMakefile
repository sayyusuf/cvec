MMVERSION = 1.0.3
EXTRAFLAGS +=
DEBUGFLAGS +=

ifndef	CC
CC := gcc
endif

ifndef	CFLAGS
	CFLAGS := -Wall -Wextra -Werror $(EXTRAFLAGS) 
endif

ifndef	TESTDIR
	TESTDIR := test
endif

ifndef	DEPDIRS
	DEPDIRS := ..
endif

ifndef	EXLIBS
	EXLIBS :=
endif

SHELL = /usr/bin/bash
LIBDIR = $(PWD)
MAKEFLAGS=	--no-print-directory


ifdef NAME
	LIBNAME := lib$(NAME).so
	LIBPATH := $(LIBDIR)/$(LIBNAME)
else
	LIBNAME := ""
	LIBPATH := ""
endif

_OBJ = $(_SRC:.c=.o)

#'0;30' is NO COLOR's ANSI color cod#'0;30' is NO COLOR's ANSI color codee
N :='\033[0m'
#'0;31' is Red's ANSI color code
R :='\033[1;31m'
#'0;32' is Green's ANSI color code
G :='\033[1;32m'
#'1;32' is Yellow's ANSI color code
Y :='\033[1;33m'
#'0;34' is Blue's ANSI color code
B :='\033[1;34m'
# clear line
D :='\033[2K'

Q :="\n"

.PHONY: all clean fclean re test update version test_update test_clean test_fclean libname lib listdep pwd libdir
.SILENT: listdep $(DEPS) listdep lib libname clean fclean $(_OBJ) version ready  deps pwd libdir $(TESTDIR)/test.sh

$(foreach dep ,$(DEPS), $(eval DEPSINC += -I $(shell cd $(DEPDIRS)/$($(dep)) && make pwd)))
$(foreach dep ,$(DEPS), $(eval DEPSLIBSPATH += $(shell cd $(DEPDIRS)/$($(dep)) && make libdir)))
$(foreach dep ,$(DEPS), $(eval DEPSLIBS += $(shell cd $(DEPDIRS)/$($(dep)) && make libname -s)))



all : deps $(LIBNAME)

$(LIBNAME): $(_OBJ) .gitignore
	
ifdef NAME
	$(CC) --shared -fPIC $(_OBJ) -o $@
endif

%.o: %.c $(_INC)
	echo -e $G$(MODULE_NAME)$N": Compiling: " $B$<$N
	$(CC)  $(CFLAGS) $(DEPSINC) -fPIC -I./ -c $<  -o $@
	echo -e $G$(MODULE_NAME)$N": Compiled : " $G$<$N

debug:
	@echo -e $Y"DEBUG MODE!"$N
	$(eval EXTRAFLAGS+=$(DEBUGFLAGS))
	@echo -e $Y"FLAGS: $(EXTRAFLAGS)"$N
	make all EXTRAFLAGS="$(EXTRAFLAGS)"

deps: $(DEPS) 

$(DEPS):
	ls $(DEPDIRS)/$($@) > /dev/null || (cd $(DEPDIRS)/ && git clone --recurse-submodules $($@LINK)) > /dev/null
	echo -en  $G
	echo -e $(MODULE_NAME) "-> "$($@)" :"$N
	cd $(DEPDIRS)/$($@) && make $(DEPCOM) EXTRAFLAGS="$(EXTRAFLAGS)"

.gitignore:
	echo >> $@ "*.o"
	echo >> $@ "*.so"
	echo >> $@ "*.a"
	echo >> $@ ".*.swp"
	echo >> $@ ".*.swo"
	echo >> $@ "$(TESTDIR)/run"
	echo >> $@ "$(TESTDIR)/*.o"
	echo >> $@ "$(TESTDIR)/*.out"
	echo >> $@ "$(TESTDIR)/*.err"
	echo >> $@ "$(TESTDIR)/*.wrn"
	echo >> $@ "$(TESTDIR)/*.log"
	echo >> $@ "$(TESTDIR)/*.so"
	echo >> $@ "$(TESTDIR)/*.a"
	echo >> $@ "$(TESTDIR)/.*.swp"
	echo >> $@ "$(TESTDIR)/.*.swo"


update:
	-git pull
	-$(foreach dep,$(DEPS), make update -C ../$($(dep));)

clean:
	-$(foreach dep,$(DEPS), make clean -C ../$($(dep));)
ifdef _SRC
	-rm -f $(_OBJ)
	echo -e $G'$(MODULE_NAME)'$N: 'Removed objects: ' $R$(_OBJ)$N
endif

fclean: clean
	-$(foreach dep,$(DEPS), make fclean -C ../$($(dep));)
ifdef NAME
	-rm -f $(LIBNAME)
	echo -e $G'$(MODULE_NAME)'$N: 'Removed LIB: ' $R$(LIBNAME)$N
endif

re: fclean all

lib:
ifdef NAME
	echo -l$(NAME)
else
	echo ""
endif

libname:
ifdef NAME
	echo $(LIBNAME)
else
	echo ""
endif

libdir:
ifdef NAME
	echo $(LIBPATH)
else
	echo ""
endif

listdep:
	echo -en $G
	for ((i = 1; i < $(MAKELEVEL); i++)); do printf '%s' "    "; done
	if (($(MAKELEVEL) > 0)); then printf '%s' "|--->"; fi
	echo -e $(MODULE_NAME) $N
	$(foreach dep ,$(DEPS), make listdep -C ../$($(dep));)

modulename:
	echo $(MODULE_NAME)

pwd:
	echo $(PWD)

#//////////////////////////////// TEST SECTION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

test_all: ready test

debug_test:
	@echo -e $Y"DEBUG MODE!"$N
	$(eval EXTRAFLAGS+=$(DEBUGFLAGS))
	@echo -e $Y"FLAGS: $(EXTRAFLAGS)"$N
	make test EXTRAFLAGS="$(EXTRAFLAGS)"

test: all $(TESTDIR)/start_test.sh  runtest

ready:
	$(eval DEPCOM = test)

$(TESTDIR)/start_test.sh:
	-mkdir $(TESTDIR)
	-echo -e > $@ \
	'#!/bin/bash' $Q\
	"R='\\033[1;31m' #RED" $Q\
	"G='\\033[1;32m' #GREEM" $Q\
	"Y='\\033[1;33m' #YELLOW" $Q\
	"B='\\033[1;34m' #BLUE" $Q\
	"D='\\033[2K' #CLEAR" $Q\
	"N='\\033[0m' #NO COLOR" $Q\
	'TESTSRC=$$(ls *.c)' $Q\
	'echo "test started..."' $Q\
	'for src in $$TESTSRC;' $Q\
	'do' $Q\
	'	rm "$$src".* 2>/dev/null ;' $Q\
	'	echo -en "" [ $$G .. $$N ] $$B$$src $$N' $Q\
	'	$$CC $$CFLAGS $$EXTRAFLAGS $$src -I ../ $$DEPSINC -Wl,--no-as-needed $$LIBPATH $$DEPSLIBSPATH -Wl,--as-needed $$EXLIBS -o "$$src".out 2>"$$src".err' $Q\
	'	if [ $$? -ne 0 ]; then' $Q\
	'		echo -e "\\r" [ $$R CE $$N ]' $Q\
	'	else' $Q\
	'		rm "$$src".err;' $Q\
	'		STR=$$((time (./"$$src".out 2>"$$src".err 1>"$$src".log)) 2>&1)' $Q\
	'		RET=$$?' $Q\
	'		echo -en $$D"\\r"' $Q\
	'		if [ $$RET -eq 0 ]; then' $Q\
	'			echo -en "\\r" [ $$G OK $$N ]' $Q\
	'		elif [ $$RET -eq 2 ]; then' $Q\
	'			echo -en "\\r" [ $$Y WR $$N ]' $Q\
	'		else' $Q\
	'			echo -en "\\r" [ $$R ER $$N ]' $Q\
	'		fi' $Q\
	'		STR=$$(echo $$STR | tr "\\n" "|")' $Q\
	'		echo -e "" $$STR "\t" $$B $$src $$N' $Q\
	'	fi' $Q\
	'done' $Q\
	'echo "test finished..."' $Q\
	'exit 0'
	-chmod +x $@

runtest:
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo Module: $(MODULE_NAME)
	@echo Path: $(shell pwd)
	@echo Dependencies: $(DEPSLIBS)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	cd $(TESTDIR) &&\
		CC="$(CC)"\
		CFLAGS="$(CFLAGS)"\
		EXTRAFLAGS="$(EXTRAFLAGS)"\
		EXLIBS="$(EXLIBS)"\
		DEPSINC="$(DEPSINC)"\
		LIBPATH="$(LIBPATH)"\
		DEPSLIBSPATH="$(DEPSLIBSPATH)"\
		./start_test.sh
	@echo 	
	@echo -----------------------------------------------------------------------------------------------


#//////////////////////////////// TEST SECTION \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
version:
	echo $(MMVERSION)
